Welcome to the Cloud Intrusion Detection System repository! This project is designed to enhance the security of AWS environments by monitoring AWS CloudTrail logs for suspicious activities and anomalies.

Overview
This system leverages machine learning and rule-based techniques to provide a robust solution for detecting potential security threats in AWS CloudTrail logs. The main components of the system include:
Log Collection: Fetches recent CloudTrail logs to monitor AWS activities.
Anomaly Detection: Uses the Isolation Forest algorithm to identify unusual API call patterns.
S3 Bucket Monitoring: Detects changes in S3 bucket permissions, specifically identifying if a bucket becomes public.
Alert System: Sends automated email alerts when potential security issues are detected.

Features
Real-time Monitoring: Quickly detects and responds to potential security threats.
Advanced Analytics: Employs machine learning to detect anomalies.
Customizable Alerts: Configurable alerts to provide relevant information for timely responses.
Robust Logging: Detailed logging for better tracking and debugging.

Configure Environment Variables: Create a .env file in the root directory and add the following environment variables:
AWS_ACCESS_KEY_ID=your_aws_access_key_id
AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key
AWS_REGION=your_aws_region
SENDER_EMAIL=your_email@gmail.com
EMAIL_PASSWORD=your_email_password
RECEIVER_EMAIL=receiver_email@gmail.com

1. Imports and Setup:
os: For accessing environment variables and file system operations.
boto3: AWS SDK for Python, used to interact with AWS services like CloudTrail.
numpy: For numerical operations and array manipulations.
IsolationForest: A machine learning model from scikit-learn for anomaly detection.
json: For parsing JSON data.
smtplib and email.mime.text: For sending email alerts.
logging: For logging information and errors.

2. Logging Setup: Sets up logging with INFO level to capture and log important events and errors.

3. AWS and Email Configuration:
Initializes an AWS session using credentials stored in environment variables.
Creates a CloudTrail client to interact with AWS CloudTrail service.
Retrieves email credentials from environment variables for sending alerts.

4. Fetch CloudTrail Logs: get_cloudtrail_logs: Fetches the most recent 10 CloudTrail events. Handles exceptions and logs errors if fetching fails.

5. Extract API Call Counts: extract_api_call_counts: Processes logs to count occurrences of each API call and returns these counts in a NumPy array.

6. Detect Public S3 Buckets: detect_public_s3_buckets: Scans logs for events indicating that an S3 bucket's public access settings have changed and generates alerts if such changes are detected.

7. Detect API Anomalies: detect_api_anomalies: Uses the Isolation Forest algorithm to detect anomalies in API call frequencies. Flags any significant deviations as anomalies and generates alerts.

8. Send Alert Email: send_alert_email: Composes and sends an email with a subject and body containing alert information. Handles exceptions and logs errors if sending fails.

9. Run Intrusion Detection: 
run_intrusion_detection: Orchestrates the entire process:
Fetches CloudTrail logs.
Applies rule-based detection for public S3 buckets.
Applies anomaly detection for API call patterns.
Sends an email alert if any issues are detected or logs that the system is normal.

10. Script Entry Point: Ensures that the run_intrusion_detection function is called when the script is executed directly.
